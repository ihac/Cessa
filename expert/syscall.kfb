#########
# supported arg_type: fd, range, bitwise, bufsize, pointer, offset, timeout, other
#
#
#########

## SYSCALLS
# 0
# ssize_t read(int fd, void *buf, size_t count);
clabel(read, ())
arg_list(read, (read_fd, read_buf, read_count))
arg_index(read_fd, 0)
arg_index(read_buf, 1)
arg_index(read_count, 2)
arg_type(read_fd, fd)
arg_type(read_buf, pointer)
arg_type(read_count, bufsize)

# 1
# ssize_t write(int fd, const void *buf, size_t count);
clabel(write, ())
arg_list(write, (write_fd, write_buf, write_count))
arg_index(write_fd, 0)
arg_index(write_buf, 1)
arg_index(write_count, 2)
arg_type(write_fd, fd)
arg_type(write_buf, pointer)
arg_type(write_count, bufsize)

# 2
# int open(const char *pathname, int flags);
# int open(const char *pathname, int flags, mode_t mode);
clabel(open, ())
arg_list(open, (open_pathname, open_flags, open_mode))
arg_index(open_pathname, 0)
arg_index(open_flags, 1)
arg_index(open_mode, 2)
arg_type(open_pathname, pointer)
arg_type(open_flags, bitwise)
arg_type(open_mode, bitwise)

# 3
# int close(int fd);
clabel(close, ())
arg_list(close, (close_fd))
arg_index(close_fd, 0)
arg_type(close_fd, fd)

# 4
# int stat(const char *pathname, struct stat *statbuf);
# get file status
clabel(stat, ())
arg_list(stat, (stat_pathname, stat_statbuf))
arg_index(stat_pathname, 0)
arg_index(stat_statbuf, 1)
arg_type(stat_pathname, pointer)
arg_type(stat_statbuf, pointer)

# 5
# int fstat(int fd, struct stat *statbuf);
# get file status
clabel(fstat, ())
arg_list(fstat, (fstat_fd, fstat_statbuf))
arg_index(fstat_fd, 0)
arg_index(fstat_statbuf, 1)
arg_type(fstat_fd, fd)
arg_type(fstat_statbuf, pointer)

# 6
# int lstat(const char *pathname, struct stat *statbuf);
# get file status(for symbolic link, returns info about the link itself)
clabel(lstat, ())
arg_list(lstat, (lstat_pathname, lstat_statbuf))
arg_index(lstat_pathname, 0)
arg_index(lstat_statbuf, 1)
arg_type(lstat_pathname, pointer)
arg_type(lstat_statbuf, pointer)

# 7
# int poll(struct pollfd *fds, nfds_t nfds, int timeout);
# wait for some event on a file descriptor
clabel(poll, ())
arg_list(poll, (poll_fds, poll_nfds, poll_timeout))
arg_index(poll_fds, 0)
arg_index(poll_nfds, 1)
arg_index(poll_timeout, 2)
arg_type(poll_fds, pointer)
arg_type(poll_nfds, other)
arg_type(poll_timeout, timeout)

# 8
# off_t lseek(int fd, off_t offset, int whence);
# reposition read/write file offset
clabel(lseek, ())
arg_list(lseek, (lseek_fd, lseek_offset, lseek_whence))
arg_index(lseek_fd, 0)
arg_index(lseek_offset, 1)
arg_index(lseek_whence, 2)
arg_index(lseek_fd, fd)
arg_index(lseek_offset, offset)
arg_index(lseek_whence, range)
# SEEK_SET: The file offset is set to offset bytes.
# SEEK_CUR: The file offset is set to its current location plus offset bytes.
# SEEK_END: The file offset is set to the size of the file plus offset bytes.
# SEEK_DATA: Adjust the file offset to the next location in the file
#            greater than or equal to offset containing data.  If offset
#            points to data, then the file offset is set to offset
# SEEK_HOLE: Adjust the file offset to the next hole in the file greater
#            than or equal to offset.  If offset points into the middle of
#            a hole, then the file offset is set to offset.  If there is no
#            hole past offset, then the file offset is adjusted to the end
#            of the file (i.e., there is an implicit hole at the end of any
#            file).
all_value(lseek_whence, (SEEK_SET, SEEK_CUR, SEEK_END, SEEK_DATA, SEEK_HOLE))

# 9
# void *mmap(void *addr, size_t length, int prot, int flags,
#            int fd, off_t offset);
# map or unmap files or devices into memory
clabel(mmap, ())
arg_list(mmap, (mmap_addr, mmap_length, mmap_prot, mmap_flags, mmap_fd, mmap_offset))
arg_index(mmap_addr, 0)
arg_index(mmap_length, 1)
arg_index(mmap_prot, 2)
arg_index(mmap_flags, 3)
arg_index(mmap_fd, 4)
arg_index(mmap_offset, 5)
arg_type(mmap_addr, pointer)
arg_type(mmap_length, bufsize)
arg_type(mmap_prot, bitwise)
arg_type(mmap_flags, bitwise)
arg_type(mmap_fd, fd)
arg_type(mmap_offset, offset)
# PROT_EXEC:  Pages may be executed.
# PROT_READ:  Pages may be read.
# PROT_WRITE: Pages may be written.
# PROT_NONE:  Pages may not be accessed.
all_value(mmap_prot, (PROT_EXEC, PROT_READ, PROT_WRITE, PROT_NONE))
all_value(mmap_flags, (MAP_SHARED, MAP_PRIVATE, MAP_32BIT, MAP_ANONYMOUS, MAP_DENYWRITE, MAP_EXECUTABLE, MAP_FILE, MAP_FIXED, MAP_GROWSDOWN, MAP_HUGETLB, MAP_HUGE_2MB, MAP_HUGE_1GB, MAP_LOCKED, MAP_NONBLOCK, MAP_NORESERVE, MAP_POPULATE, MAP_STACK, MAP_UNINITIALIZED))

# 10
# int mprotect(void *addr, size_t len, int prot);
# set protection on a region of memory
clabel(mprotect, ())
arg_list(mprotect, (mprotect_addr, mprotect_len, mprotect_prot))
arg_index(mprotect_addr, 0)
arg_index(mprotect_len, 1)
arg_index(mprotect_prot, 2)
arg_type(mprotect_addr, pointer)
arg_type(mprotect_len, other)
arg_type(mprotect_prot, bitwise)
all_value(mprotect_prot, (PROT_EXEC, PROT_READ, PROT_WRITE, PROT_NONE, PROT_SEM, PROT_SAO, PROT_GROWSUP, PROT_GROWSDOWN))

# 11
# int munmap(void *addr, size_t length);
# map or unmap files or devices into memory
clabel(munmap, ())
arg_list(munmap, (munmap_addr, munmap_length))
arg_index(munmap_addr, 0)
arg_index(munmap_length, 1)
arg_type(munmap_addr, pointer)
arg_type(munmap_length, bufsize)

# 12
# int brk(void *addr);
# change data segment size
clabel(brk, ())
arg_list(brk, (brk_addr))
arg_index(brk_addr, 0)
arg_type(brk_addr, pointer)

# 13
# int sigaction(int signum, const struct sigaction *act,
#               struct sigaction *oldact);
# examine and change a signal action
clabel(rt_sigaction, ())
arg_list(rt_sigaction, (rt_sigaction_signum, rt_sigaction_act, rt_sigaction_oldact))
arg_index(rt_sigaction_signum, 0)
arg_index(rt_sigaction_act, 1)
arg_index(rt_sigaction_oldact, 2)
arg_type(rt_sigaction_signum, other)
arg_type(rt_sigaction_act, pointer)
arg_type(rt_sigaction_oldact, pointer)

# 14
# int rt_sigprocmask(int how, const kernel_sigset_t *set,
#                    kernel_sigset_t *oldset, size_t sigsetsize);
# examine and change blocked signals
clabel(rt_sigprocmask, ())
arg_list(rt_sigprocmask, (rt_sigprocmask_how, rt_sigprocmask_set, rt_sigprocmask_oldset, rt_sigprocmask_sigsetsize))
arg_index(rt_sigprocmask_how, 0)
arg_index(rt_sigprocmask_set, 1)
arg_index(rt_sigprocmask_oldset, 2)
arg_index(rt_sigprocmask_sigsetsize, 3)
arg_type(rt_sigprocmask_how, range)
arg_type(rt_sigprocmask_set, pointer)
arg_type(rt_sigprocmask_oldset, pointer)
arg_type(rt_sigprocmask_sigsetsize, other)
# SIG_BLOCK: The set of blocked signals is the union of the current set and the set argument.
# SIG_UNBLOCK: The signals in set are removed from the current set of blocked
#              signals. It is permissible to attempt to unblock a signal
#              which is not blocked.
# SIG_SETMASK: The set of blocked signals is set to the argument set.
all_value(rt_sigprocmask_how, (SIG_BLOCK, SIG_UNBLOCK, SIG_SETMASK))

## 15
# int sigreturn(...);
# return from signal handler and cleanup stack frame
clabel(rt_sigreturn, ())
arg_list(rt_sigreturn, ())

## 16
# int ioctl(int fd, unsigned long request, ...);
# control devie
clabel(ioctl, ())
arg_list(ioctl, (ioctl_fd, ioctl_request))
arg_index(ioctl_fd, 0)
arg_index(ioctl_request, 1)
arg_type(ioctl_fd, fd)
arg_type(ioctl_request, other)

## 17
# ssize_t pread(int fd, void *buf, size_t count, off_t offset);
# read from a file descriptor at a given offset
clabel(pread64, ())
arg_list(pread64, (pread64_fd, pread64_buf, pread64_count, pread64_offset))
arg_index(pread64_fd, 0)
arg_index(pread64_buf, 1)
arg_index(pread64_count, 2)
arg_index(pread64_offset, 3)
arg_type(pread64_fd, fd)
arg_type(pread64_buf, pointer)
arg_type(pread64_count, bufsize)
arg_type(pread64_offset, offset)

## 18
# ssize_t pwrite(int fd, void *buf, size_t count, off_t offset);
# write to a file descriptor at a given offset
clabel(pwrite64, ())
arg_list(pwrite64, (pwrite64_fd, pwrite64_buf, pwrite64_count, pwrite64_offset))
arg_index(pwrite64_fd, 0)
arg_index(pwrite64_buf, 1)
arg_index(pwrite64_count, 2)
arg_index(pwrite64_offset, 3)
arg_type(pwrite64_fd, fd)
arg_type(pwrite64_buf, pointer)
arg_type(pwrite64_count, bufsize)
arg_type(pwrite64_offset, offset)

## 19
# ssize_t readv(int fd, const struct iovec *iov, int iovcnt);
# read data into multiple buffers
clabel(readv, ())
arg_list(readv, (readv_fd, readv_iov, readv_iovcnt))
arg_index(readv_fd, 0)
arg_index(readv_iov, 1)
arg_index(readv_iovcnt, 2)
arg_type(readv_fd, fd)
arg_type(readv_iov, pointer)
arg_type(readv_iovcnt, other)

## 20
# ssize_t writev(int fd, const struct iovec *iov, int iovcnt);
# write data into multiple buffers
clabel(writev, ())
arg_list(writev, (writev_fd, writev_iov, writev_iovcnt))
arg_index(writev_fd, 0)
arg_index(writev_iov, 1)
arg_index(writev_iovcnt, 2)
arg_type(writev_fd, fd)
arg_type(writev_iov, pointer)
arg_type(writev_iovcnt, other)

## 21
# int access(const char *pathname, int mode);
# check user's permissions for a file
clabel(access, ())
arg_list(access, (access_pathname, access_mode))
arg_index(access_pathname, 0)
arg_index(access_mode, 1)
arg_type(access_pathname, pointer)
arg_type(access_mode, bitwise)

## 22
# int pipe(int pipefd[2]);
# create pipe
clabel(pipe, ())
arg_list(pipe, (pipe_pipefd))
arg_index(pipe_pipefd, 0)
arg_index(pipe_pipefd, pointer)

## 23
# int select(int nfds, fd_set *readfds, fd_set *writefds,
#            fd_set *exceptfds, struct timeval *timeout);
# synchronous I/O multiplexing
clabel(select, ())
# arg_list(select, nfds)

## 32
# int dup(int oldfd);
# duplicate a file descriptor
clabel(dup, ())
arg_list(dup, (dup_oldfd))
arg_index(dup_oldfd, 0)
arg_type(dup_oldfd, fd)

## 33
# int dup2(int oldfd, int newfd);
# duplicate a file descriptor
clabel(dup2, ())
arg_list(dup2, (dup_oldfd, dup_newfd))
arg_index(dup_oldfd, 0)
arg_index(dup_newfd, 1)
arg_type(dup_oldfd, fd)
arg_type(dup_newfd, fd)

## 35
# int nanosleep(const struct timespec *req, struct timespec *rem);
# high-resolution sleep
clabel(nanosleep, ())
arg_list(nanosleep, (nanosleep_req, nanosleep_rem))
arg_index(nanosleep_req, 0)
arg_index(nanosleep_rem, 1)
arg_type(nanosleep_req, pointer)
arg_type(nanosleep_rem, pointer)

## 40
# ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count);
# transfer data between file descriptors
clabel(sendfile, ())
arg_list(sendfile, (sendfile_out_fd, sendfile_in_fd, sendfile_offset, sendfile_count))
arg_index(sendfile_out_fd, 0)
arg_index(sendfile_in_fd, 1)
arg_index(sendfile_offset, 2)
arg_index(sendfile_count, 3)
arg_index(sendfile_out_fd, fd)
arg_index(sendfile_in_fd, fd)
arg_index(sendfile_offset, pointer)
arg_index(sendfile_count, bufsize)

## 41
# int socket(int domain, int type, int protocol);
# create an endpoint for communication
clabel(socket, (IPv4, IPv6))
arg_list(socket, (socket_domain, socket_type, socket_protocol))
arg_index(socket_domain, 0)
arg_index(socket_type, 1)
arg_index(socket_protocol, 2)
arg_type(socket_domain, range)
arg_type(socket_type, bitwise)
arg_type(socket_protocol, other)
arg_related(socket_domain, socket_type)
all_value(socket_domain, (AF_LOCAL, AF_INET, AF_INET6, AF_IPX, AF_NETLINK, AF_X25, AF_AX25, AF_ATMPVC, AF_APPLETALK, AF_PACKET, AF_ALG))
all_value(socket_type, (SOCK_STREAM, SOCK_DGRAM, SOCK_SEQPACKET, SOCK_RAW, SOCK_RDM, SOCK_PACKET, SOCK_NONBLOCK, SOCK_CLOEXEC))

## 42
# int connect(int sockfd, const struct sockaddr *addr,
#             socklen_t addrlen);
# initiate a connection on a socket
clabel(connect, ())
arg_list(connect, (connect_sockfd, connect_addr, connect_addrlen))
arg_index(connect_sockfd, 0)
arg_index(connect_addr, 1)
arg_index(connect_addrlen, 2)
arg_type(connect_sockfd, fd)
arg_type(connect_addr, pointer)
arg_type(connect_addrlen, bufsize)

## 43
# int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
# accept a connection on a socket
clabel(accept, ())
arg_list(accept, (accept_sockfd, accept_addr, accept_addrlen))
arg_index(accept_sockfd, 0)
arg_index(accept_addr, 1)
arg_index(accept_addrlen, 2)
arg_type(accept_sockfd, fd)
arg_type(accept_addr, pointer)
arg_type(accept_addrlen, pointer)

## 44
# ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,
#                const struct sockaddr *dest_addr, socklen_t addrlen);
# send a message to a socket
clabel(sendto, ())
arg_list(sendto, (sendto_sockfd, sendto_buf, sendto_len, sendto_flags, sendto_dest_addr, sendto_addrlen))
arg_index(sendto_sockfd, 0)
arg_index(sendto_buf, 1)
arg_index(sendto_len, 2)
arg_index(sendto_flags, 3)
arg_index(sendto_dest_addr, 4)
arg_index(sendto_addrlen, 5)
arg_index(sendto_sockfd, fd)
arg_index(sendto_buf, pointer)
arg_index(sendto_len, bufsize)
arg_index(sendto_flags, bitwise)
arg_index(sendto_dest_addr, pointer)
arg_index(sendto_addrlen, bufsize)

## 45
# ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,
#                  struct sockaddr *src_addr, socklen_t *addrlen);
# receive a message from a socket
clabel(recvfrom, ())
arg_list(recvfrom, (recvfrom_sockfd, recvfrom_buf, recvfrom_len, recvfrom_flags, recvfrom_src_addr, recvfrom_addrlen))
arg_index(recvfrom_sockfd, 0)
arg_index(recvfrom_buf, 1)
arg_index(recvfrom_len, 2)
arg_index(recvfrom_flags, 3)
arg_index(recvfrom_src_addr, 4)
arg_index(recvfrom_addrlen, 5)
arg_type(recvfrom_sockfd, fd)
arg_type(recvfrom_buf, pointer)
arg_type(recvfrom_len, bufsize)
arg_type(recvfrom_flags, bitwise)
arg_type(recvfrom_src_addr, pointer)
arg_type(recvfrom_addrlen, pointer)
all_value(recvfrom_flags, (MSG_DONTWAIT, MSG_ERRQUEUE, MSG_CMSG_CLOEXEC, MSG_OOB, MSG_PEEK, MSG_TRUNC, MSG_WAITALL))


## 46
# ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags);
# send a message to a socket
clabel(sendmsg, ())
arg_list(sendmsg, (sendmsg_sockfd, sendmsg_msg, sendmsg_flags))
arg_index(sendmsg_sockfd, 0)
arg_index(sendmsg_msg, 1)
arg_index(sendmsg_flags, 2)
arg_index(sendmsg_sockfd, fd)
arg_index(sendmsg_msg, pointer)
arg_index(sendmsg_flags, bitwise)

## 47
# ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);
# receive a message from a socket
clabel(recvmsg, ())
arg_list(recvmsg, (recvmsg_sockfd, recvmsg_msg, recvmsg_flags))
arg_index(recvmsg_sockfd, 0)
arg_index(recvmsg_msg, 1)
arg_index(recvmsg_flags, 2)
arg_index(recvmsg_sockfd, fd)
arg_index(recvmsg_msg, pointer)
arg_index(recvmsg_flags, bitwise)

## 48
# int shutdown(int sockfd, int how);
# shut down part of a full-duplex connection
clabel(shutdown, ())
arg_list(shutdown, (shutdown_sockfd, shutdown_how))
arg_index(shutdown_sockfd, 0)
arg_index(shutdown_how, 1)
arg_type(shutdown_sockfd, fd)
arg_type(shutdown_how, range)
all_value(shutdown_how, (SHUT_RD, SHUT_WR, SHUT_RDWR))

## 49
# int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
# bind a name to a socket
clabel(bind, ())
arg_list(bind, (bind_sockfd, bind_addr, bind_addrlen))
arg_index(bind_sockfd, 0)
arg_index(bind_addr, 1)
arg_index(bind_addrlen, 2)
arg_type(bind_sockfd, fd)
arg_type(bind_addr, pointer)
arg_type(bind_addrlen, bufsize)

## 50
# int listen(int sockfd, int backlog);
# listen for connections on a socket
clabel(listen, ())
arg_list(listen, (listen_sockfd, listen_backlog))
arg_index(listen_sockfd, 0)
arg_index(listen_backlog, 1)
arg_type(listen_sockfd, fd)
arg_type(listen_backlog, other)

## 51
# int getsockname(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
# get socket name
clabel(getsockname, ())
arg_list(getsockname, (getsockname_sockfd, getsockname_addr, getsockname_addrlen))
arg_index(getsockname_sockfd, 0)
arg_index(getsockname_addr, 1)
arg_index(getsockname_addrlen, 2)
arg_type(getsockname_sockfd, fd)
arg_type(getsockname_addr, pointer)
arg_type(getsockname_addrlen, pointer)

## 52
# int getpeername(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
# get name of connected peer socket
clabel(getpeername, ())
arg_list(getpeername, (getpeername_sockfd, getpeername_addr, getpeername_addrlen))
arg_index(getpeername_sockfd, 0)
arg_index(getpeername_addr, 1)
arg_index(getpeername_addrlen, 2)
arg_type(getpeername_sockfd, fd)
arg_type(getpeername_addr, pointer)
arg_type(getpeername_addrlen, pointer)

## 53
# int socketpair(int domain, int type, int protocol, int sv[2]);
# create a pair of connected sockets
clabel(socketpair, (IPv4, IPv6))
arg_list(socketpair, (socketpair_domain, socketpair_type, socketpair_protocol, socketpair_sv))
arg_index(socketpair_domain, 0)
arg_index(socketpair_type, 1)
arg_index(socketpair_protocol, 2)
arg_index(socketpair_sv, 3)
arg_type(socketpair_domain, range)
arg_type(socketpair_type, bitwise)
arg_type(socketpair_protocol, other)
arg_type(socketpair_sv, pointer)
arg_related(socketpair_domain, socketpair_type)
all_value(socket_domain, (AF_LOCAL, AF_INET, AF_INET6, AF_IPX, AF_NETLINK, AF_X25, AF_AX25, AF_ATMPVC, AF_APPLETALK, AF_PACKET, AF_ALG))
all_value(socket_type, (SOCK_STREAM, SOCK_DGRAM, SOCK_SEQPACKET, SOCK_RAW, SOCK_RDM, SOCK_PACKET, SOCK_NONBLOCK, SOCK_CLOEXEC))

## 54
# int setsockopt(int sockfd, int level, int optname,
#                const void *optval, socklen_t *optlen);
# set options on sockets
clabel(setsockopt, ())
arg_list(setsockopt, (setsockopt_sockfd, setsockopt_level, setsockopt_optname, setsockopt_optval, setsockopt_optlen))
arg_index(setsockopt_sockfd, 0)
arg_index(setsockopt_level, 1)
arg_index(setsockopt_optname, 2)
arg_index(setsockopt_optval, 3)
arg_index(setsockopt_optlen, 4)
arg_type(setsockopt_sockfd, fd)
arg_type(setsockopt_level, other)
arg_type(setsockopt_optname, other)
arg_type(setsockopt_optval, pointer)
arg_type(setsockopt_optlen, pointer)

## 55
# int getsockopt(int sockfd, int level, int optname,
#                void *optval, socklen_t *optlen);
# get options on sockets
clabel(getsockopt, ())
arg_list(getsockopt, (getsockopt_sockfd, getsockopt_level, getsockopt_optname, getsockopt_optval, getsockopt_optlen))
arg_index(getsockopt_sockfd, 0)
arg_index(getsockopt_level, 1)
arg_index(getsockopt_optname, 2)
arg_index(getsockopt_optval, 3)
arg_index(getsockopt_optlen, 4)
arg_type(getsockopt_sockfd, fd)
arg_type(getsockopt_level, other)
arg_type(getsockopt_optname, other)
arg_type(getsockopt_optval, pointer)
arg_type(getsockopt_optlen, pointer)

## 56
# int clone(int (*fn) (void *), void *child_stack,
#           int flags, void *arg, ...);
# create a child process
clabel(clone, ())
arg_list(clone, (clone_fn, clone_child_stack, clone_flags, clone_arg))
arg_index(clone_fn, 0)
arg_index(clone_child_stack, 1)
arg_index(clone_flags, 2)
arg_index(clone_arg, 3)
arg_type(clone_fn, pointer)
arg_type(clone_child_stack, pointer)
arg_type(clone_flags, bitwise)
arg_type(clone_arg, pointer)
all_value(clone_flags, (CLONE_CHILD_CLEARTID, CLONE_CHILD_SETTID, CLONE_FILES, CLONE_FS, CLONE_IO, CLONE_NEWCGROUP, CLONE_NEWIPC, CLONE_NEWNET, CLONE_NEWNS, CLONE_NEWPID, CLONE_NEWUSER, CLONE_NEWUTS, CLONE_PARENT, CLONE_PARENT_SETTID, CLONE_PID, CLONE_PTRACE, CLONE_SETTLS, CLONE_SIGHAND, CLONE_STOPPED, CLONE_SYSVSEM, CLONE_THREAD, CLONE_UNTRACED, CLONE_VFORK, CLONE_VM))

## 57
# pid_t fork(void)
# create a child process
clabel(fork, ())
arg_list(fork, ())

## 58
# pid_t vfork(void)
# create a child process and block parent
clabel(vfork, ())
arg_list(vfork, ())

## 59
# int execve(const char *filename, char *const argv[], char *const envp[]);
# execute program
clabel(execve, ())
arg_list(execve, (execve_filename, execve_argv, execve_envp))
arg_index(execve_filename, 0)
arg_index(execve_argv, 1)
arg_index(execve_envp, 2)
arg_type(execve_filename, pointer)
arg_type(execve_argv, pointer)
arg_type(execve_envp, pointer)

## 60
# void _exit(int status);
# terminate the calling process
clabel(exit, ())
arg_list(exit, (exit_status))
arg_index(exit_status, 0)
arg_type(exit_status, other)

## 61
# pid_t wait4(pid_t pid, int *wstatus, int options,
#             struct rusage *rusage);
# wait for process to change state, BSD style
clabel(wait4, ())
arg_list(wait4, (wait4_pid, wait4_wstatus, wait4_options, wait4_rusage))
arg_index(wait4_pid, 0)
arg_index(wait4_wstatus, 1)
arg_index(wait4_options, 2)
arg_index(wait4_rusage, 3)
arg_type(wait4_pid, other)
arg_type(wait4_wstatus, pointer)
arg_type(wait4_options, other)
arg_type(wait4_rusage, pointer)

## 62
# int kill(pid_t pid, int sig);
# send signal to a process
clabel(kill, ())
arg_list(kill, (kill_pid, kill_sig))
arg_index(kill_pid, 0)
arg_index(kill_sig, 1)
arg_type(kill_pid, other)
arg_type(kill_sig, other)

## 63
# int uname(struct utsname *buf);
# get name and information about current kernel
clabel(uname, ())
arg_list(uname, (uname_buf))
arg_index(uname_buf, 0)
arg_type(uname_buf, pointer)

## 64
# in semget(key_t key, int nsems, int semflg);
# get a System V semaphore set identifier
clabel(semget, ())
arg_list(semget, (semget_key, semget_nsems, semget_semflg))
arg_index(semget_key, 0)
arg_index(semget_nsems, 1)
arg_index(semget_semflg, 2)
arg_type(semget_key, other)
arg_type(semget_nsems, other)
arg_type(semget_semflg, other)

## 65
# int semop(int semid, struct sembuf *sops, size_t nsops);
# System V semaphore operations
clabel(semop, ())
arg_list(semop, (semop_semid, semop_sops, semop_nsops))
arg_index(semop_semid, 0)
arg_index(semop_sops, 1)
arg_index(semop_nsops, 2)
arg_type(semop_semid, other)
arg_type(semop_sops, pointer)
arg_type(semop_nsops, other)

## 66
# int semctl(int semid, int semnum, int cmd, ...);
# System V semaphore control operations
clabel(semctl, ())
arg_list(semctl, (semctl_semid, semctl_semnum, semctl_cmd))
arg_index(semctl_semid, 0)
arg_index(semctl_semnum, 1)
arg_index(semctl_cmd, 2)
arg_type(semctl_semid, other)
arg_type(semctl_semnum, pointer)
arg_type(semctl_cmd, range)
all_value(semctl_cmd, (IPC_STAT, IPC_SET, IPC_RMID, IPC_INFO, SEM_INFO, SEM_STAT, GETALL, GETNCNT, GETPID, GETVAL, GETZCNT, SETALL, SETVAL))

## 72
# int fcntl(int fd, int cmd, ...);
# manipulate file descriptor
clabel(fcntl, ())
arg_list(fcntl, (fcntl_fd, fcntl_cmd))
arg_index(fcntl_fd, 0)
arg_index(fcntl_cmd, 1)
arg_type(fcntl_fd, fd)
arg_type(fcntl_cmd, other)

## 73
# int flock(int fd, int operation);
# apply or remove an advisory lock on an open file
clabel(flock, ())
arg_list(flock, (flock_fd, flock_operation))
arg_index(flock_fd, 0)
arg_index(flock_operation, 1)
arg_type(flock_fd, fd)
arg_type(flock_operation, range)
all_value(flock_operation, (LOCK_SH, LOCK_EX, LOCK_UN, LOCK_SH_NB, LOCK_EX_NB, LOCK_UN_NB))

# int access(const char *pathname, int mode);

